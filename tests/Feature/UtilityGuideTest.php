<?php

namespace Tests\Feature;

use Corals\User\Models\User;
use Corals\Utility\Guide\Models\Guide;
use Corals\Utility\SEO\Facades\SEOItems;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UtilityGuideTest extends TestCase
{
    use DatabaseTransactions;

    protected $guide;
    protected $guideRequest;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_utility_guide_store()
    {
        $routes = SEOItems::getRouteManager();
        $route = array_rand($routes);
        $status = array_rand(['active', 'inactive']);
        $intros = ['intro1', 'intro2', 'intro3'];
        $intro = array_rand($intros);

        $this->guideRequest = [
            'url' => 'https://test.com',
            'route' => $route,
            'status' => $status,
            'properties' => [
                'guide_config' => [
                    ['intro' => $intros[$intro],
                        'element' => null,
                        'position' => null,
                    ],
                ],
            ],
        ];
        $response = $this->post('utilities/guides', $this->guideRequest);

        $this->guide = Guide::query()->where([
            ['url', $this->guideRequest['url']],
            ['route', $this->guideRequest['route']],
        ])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('utilities/guides');

        $this->assertDatabaseHas('utility_guides', [
            'url' => $this->guide->url,
            'route' => $this->guide->route,
        ]);
    }

    public function test_utility_guide_edit()
    {
        $this->test_utility_guide_store();
        if ($this->guide) {
            $response = $this->get('utilities/guides/' . $this->guide->hashed_id . '/edit');

            $response->assertViewIs('utility-guide::guide.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_utility_guide_update()
    {
        $this->test_utility_guide_store();

        if ($this->guide) {
            $url = 'https://test2.com';
            $response = $this->put('utilities/guides/' . $this->guide->hashed_id, [
                'url' => $url,
            ]);

            $response->assertRedirect('utilities/guides');
            $this->assertDatabaseHas('utility_guides', [
                'url' => $url,
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_utility_guide_delete()
    {
        $this->test_utility_guide_store();

        if ($this->guide) {
            $response = $this->delete('utilities/guides/' . $this->guide->hashed_id);

            $response->assertStatus(200)->assertSeeText('Guide has been deleted successfully.');

            $this->isSoftDeletableModel(Guide::class);
            $this->assertDatabaseMissing('utility_guides', [
                'id' => $this->guide->id,
                'url' => $this->guide->url,
                'route' => $this->guide->route,
            ]);
        }
        $this->assertTrue(true);
    }
}
